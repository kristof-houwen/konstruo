<?php
/* **************************************************************************************************************************************************
 * 
 *
 *  Copyright (C) 2010 by Kristof Houwen, 8800 Roeselare.
 *  All rights reserved.
 *
 *  This source code is the proprietary confidential property of Kristof Houwen, and is provided to licensee solely for documentation and
 *  educational purposes. Reproduction, publication, or distribution in any form to any party other than the licensee is strictly prohibited.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *  Author:		Kristof Houwen
 *  Company:    SitSol webdesign
 *  E-mail:		kristof(at)sitsol.be
 *  Url:		www.sitsol.be
 * 
 *  Project:    SitSol internal framework
 *  Version:	0.1             10/11/2011
 *
 * *****************************************************************************************************************************************************/

/** TODO ******** 

we kunnen een routes.ini file maken en daarin de routes definiÃ«ren die we wensen te gebruiken

[blog_route]
url = "blog/article/[args]"
controller = "BlogController"
action = "article"

[default_route]
url = "{controller}/{action}/[args]"
controller = "Homecontroller"
action = "index"

-> we moeten dit uitlezen in de config.ini file en van iedere entry een object maken 'route' die dan als array wordt bijgehouden in private var in app
de array met routes wordt meegegeven in de constructor van StsRouter

als we een opsplitsing doen, wordt de controller naam gecontroleerd op een overeenkomst in de array,  als deze overeenkomt bekijken we de action naam, komt deze niet overeen
dan gaan we verder naar default.  Wat met bv shop/myController/myAction/detail/1 -> hoe gaan we dit verwerken ??  We moeten de uri vergelijken
met de opgegeven url, alles wat starts with overeenkomt = opsplitsen en ieder deel bekijken om zo tot definitief te komen



******************* */

/** 
 * Takes the incoming URI and routes to the correct controller and action method
 *
 */
class StsRouter {
	
	private $_uri;
	private $_controllerName;
	private $_actionName;
	private $_args = array();
	private $_routes;
	
	private $_defaultController = 'HomeController';
	private $_defaultAction = 'index';
	
	private $_registry;
	
	public function __construct($routes)
	{
		$this->_routes = $routes;
		$this->setDefaultController();
		$this->_uri = strtolower((empty($_GET['rt'])) ? '' : $_GET['rt']);
		$this->processUri();
	}
	
	/* ***** Getter & setters ********** */
	public function get_controller()
	{
		if (!empty($this->_controllerName) && is_file(CONTROLLER_PATH . '/' . $this->_controllerName))
			return $this->_controllerName;
		return $this->_defaultController;
	}
	
	public function get_action()
	{
		if (!empty($this->_actionName))
			return $this->_actionName;
		return $this->_defaultAction;
	}
	
	public function get_args()
	{
		return $this->_args;
	}
	
	public function set_registry($value)
	{
		$this->_registry = $value;
		$this->setParams();
	}
	
	/* ***** Private helper methods ********** */
	private function processUri()
	{ 
		try {
			if (empty($this->_uri))
			 	return;
			
	 		if ($this->findInRoutes())
	 			return;

			$urlParts = explode('/', $this->_uri);
			$controllerName = ucfirst(trim($urlParts[0]));
			if (!empty($controllerName))
				$this->_controllerName = $controllerName . 'Controller';
			$this->_actionName = trim($urlParts[1]);
			
			// all other parts of the uri are parameters
			$j = 0;
			reset($urlParts);
			for ($i = 2; $i < count($urlParts); $i++) {
				$this->_args[$j] = $urlParts[$i];
				$j++;
			}
			
		} catch (Exception $e) { 
			echo 'ERROR: Cannot process uri ' . $this->uri . '<br />'; 
		}
	}
	
	private function setParams()
	{
		if (!empty($this->_registry)) {
			$this->_defaultController = isset($this->_registry["default_controller"]) ? $this->_registry["default_controller"] : 'HomeController';
			$this->_defaultAction = isset($this->_registry["default_action"]) ? $this->_registry["default_action"] : 'index';
		}
	}

	private function findInRoutes()
	{
		// controleren of de uri overeenkomt met een bepaalde route, de correcte controller en actionnaam toevoegen en 
		// overige zaken als parameter meenemen.  Return true zodat we niet meer verder moeten gaan zoeken naar default controller
		foreach ($this->_routes as $route) {
			echo "ROUTE " . $route->url . " / URI " . $this->_uri . "<br />";
			if (StsHelpers::startsWith($route->url, $this->_uri)) {
				echo "ROUTE " . $route->url . " = URI " . $this->_uri;
			}
		}
		return false;
	}

	private function setDefaultController()
	{
		if ($this->_routes != null && $this->_routes["default"] != null) {
			$this->_defaultAction = $this->_routes["default"]->action;
			$this->_defaultController = $this->_routes["default"]->controller;
		}
	}
}


?>



